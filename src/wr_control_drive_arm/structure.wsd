@startuml Structure
enum MotorChannel{
    + A
    + B
}
class Motor{
    + Motor(string controllerName, Channel motorChannel)
    + void setPower(double power)
    + bool getOverCurrentStatus()
}

Motor -> MotorChannel

class Joint{
    + Joint(String name)
    + void setTarget(double target)
    + bool hasReachedTarget()
    + void stop()  
}

interface JointPositionMonitor{
    + {abstract} virtual double getJointPosition()
}

class EncoderJointPositionMonitor implements JointPositionMonitor{

}

interface JointToMotorSpeedConverter{
    + {abstract} virtual void setJointSpeed(double speed)
}

class DirectJointToMotorSpeedConverter implements JointToMotorSpeedConverter{

}

class DifferentialJointToMotorSpeedConverter implements JointToMotorSpeedConverter{

}

@enduml

@startuml seq
    participant ROS
    MoveIt -> ActionServer : Sends a motion path
    loop For each waypoint in the motion
        loop For each joint in the arm
            ActionServer -> Joint : Set the next setpoint per joint
            Joint -> Joint : Start the execution loop
        end
        loop While some joint has not reached its setpoint
            note over ActionServer : Wait
            ROS -> Joint : Kicks off Timer Event
            activate Joint
            Joint -> "PID Loop" : Feed the setpoint
            Joint -> JointPositionMonitor : Ask for the joint position
            activate JointPositionMonitor
            JointPositionMonitor -> Joint : Sends back joint position
            deactivate JointPositionMonitor
            Joint -> "PID Loop" : Feed the feedback
            deactivate Joint

            "PID Loop" -> Joint : New output available
            activate Joint
            Joint -> JointToMotorSpeedConverter : Dispatch new speed
            activate JointToMotorSpeedConverter
            JointToMotorSpeedConverter -> JointToMotorSpeedConverter : Determine hardware speeds
            JointToMotorSpeedConverter -> "Motor(s)" : Dispatch hardware speeds
            deactivate JointToMotorSpeedConverter
            deactivate Joint
        end
    end
    
@enduml
